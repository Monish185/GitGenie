import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { Moon, Sun } from 'lucide-react';
import DiffViewer from './DiffViewer';

function ReportAnalysis() {
  const { repoid, reponame } = useParams();
  const [loading, setLoading] = useState(true);
  const [report, setReport] = useState(null);
  const [fixes, setFixes] = useState({});
  const [preview, setPreview] = useState({});
  const [showPreview, setShowPreview] = useState({});
  const [commitStatus, setCommitStatus] = useState('');
  const [previewLoading, setPreviewLoading] = useState({});
  const [showPRModal, setShowPRModal] = useState(false);
  const [prTitle, setPrTitle] = useState('');
  const [prBody, setPrBody] = useState('');
  const [baseBranch, setBaseBranch] = useState('main');
  const [repoInfo, setRepoInfo] = useState(null);
  const [darkMode, setDarkMode] = useState(() => {
    // Initialize from localStorage or default to false
    const saved = localStorage.getItem('darkMode');
    return saved ? JSON.parse(saved) : false;
  });
  
  const navigate = useNavigate();
  const location = useLocation();
  const repourl = location.state?.repourl || '';

  // Save dark mode preference to localStorage
  useEffect(() => {
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
  }, [darkMode]);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  useEffect(() => {
    const fetchAnalysis = async () => {
      try {
        const token = localStorage.getItem('access_token');
        if (!token) {
          navigate('/login');
          return;
        }

        const [analysisRes, repoInfoRes] = await Promise.all([
          axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze`, {
            repo_url: repourl,
            token,
          }),
          axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze/get-repo-info`, {
            repo_url: repourl,
            token,
          })
        ]);

        setReport(analysisRes.data);
        setRepoInfo(repoInfoRes.data);
        setBaseBranch(repoInfoRes.data.default_branch || 'main');
        setLoading(false);
      } catch (err) {
        console.error("Error fetching analysis report:", err);
        alert("Failed to fetch analysis report");
        navigate('/repos');
      }
    };

    fetchAnalysis();
  }, [repourl, navigate]);

  useEffect(() => {
    const fixCount = Object.keys(fixes).length;
    if (fixCount > 0) {
      setPrTitle(`🤖 GitPal: Fix ${fixCount} code smell${fixCount > 1 ? 's' : ''}`);
      setPrBody(`## 🤖 GitPal Automated Code Fixes

This pull request contains automated fixes for ${fixCount} code smell${fixCount > 1 ? 's' : ''} detected by GitPal.

### Changes Made:
- Applied ${fixCount} automated fix${fixCount > 1 ? 'es' : ''}
- Improved code quality and maintainability
- Fixed various code smells and anti-patterns

### Review Notes:
- All fixes were generated using AI-powered analysis
- Please review the changes before merging
- Consider running your test suite to ensure nothing is broken

---
*This PR was automatically generated by GitPal 🤖*`);
    }
  }, [fixes]);

  const handlePreview = async (file_path, smell_code, line_number) => {
    const key = file_path + line_number;
    
    try {
      setPreviewLoading(prev => ({ ...prev, [key]: true }));
      
      const [previewRes, contentRes] = await Promise.all([
        axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze/preview-fix`, {
          file_path,
          smell_code,
          line_number: parseInt(line_number, 10),
        }),
        axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze/get-file-content`, {
          file_path,
        })
      ]);

      const beforeContent = contentRes.data?.content;
      const afterContent = previewRes.data?.preview_code;

      if (!beforeContent || !afterContent) {
        throw new Error('Invalid response: missing content data');
      }

      const beforeStr = String(beforeContent).trim();
      const afterStr = String(afterContent).trim();

      if (!beforeStr || !afterStr) {
        throw new Error('Empty content received from server');
      }

      setPreview(prev => ({
        ...prev,
        [key]: {
          before: beforeStr,
          after: afterStr,
          fileName: file_path.split('/').pop() || 'unknown',
          relativePath: file_path,
        }
      }));

      setShowPreview(prev => ({
        ...prev,
        [key]: true,
      }));

    } catch (err) {
      console.error("Error previewing fix:", err);
      alert(`Failed to preview fix: ${err.message || 'Unknown error'}`);
      
      setPreview(prev => {
        const newState = { ...prev };
        delete newState[key];
        return newState;
      });
      
      setShowPreview(prev => ({
        ...prev,
        [key]: false,
      }));
    } finally {
      setPreviewLoading(prev => ({ ...prev, [key]: false }));
    }
  };

  const handleFix = async (file_path, smell_code, line_number) => {
    try {
      const res = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze/generate-fix`, {
        file_path,
        smell_code,
        line_number: parseInt(line_number, 10),
      });

      const key = file_path + line_number;

      if (!res.data?.fix) {
        throw new Error('No fix data received from server');
      }

      setFixes(prev => ({
        ...prev,
        [key]: {
          fixed_code: res.data.fix,
          file_path,
        }
      }));

      setShowPreview(prev => ({
        ...prev,
        [key]: false,
      }));

    } catch (err) {
      console.error("Error generating fix:", err);
      alert(`Failed to generate fix: ${err.message || 'Unknown error'}`);
    }
  };

  const handleFixAll = async () => {
    try {
      const token = localStorage.getItem("access_token");

      const res = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze/fix-all`, {
        repo_url: repourl,
        token,
      });

      if (res.data.success) {
        const updatedFixes = {};
        res.data.fixed_issues.forEach(issue => {
          const key = issue.file_path + issue.line_number;
          updatedFixes[key] = {
            fixed_code: issue.fix,
            file_path: issue.file_path
          };
        });

        setFixes(updatedFixes);
        setShowPreview({});
        alert(`✅ Fixed ${res.data.fixed_issues.length} issues.`);
      } else {
        alert("⚠️ Fix-all failed.");
      }
    } catch (err) {
      console.error("Error during fix-all:", err);
      alert("Fix-all failed.");
    }
  };

  const handleCommitFixes = async (createPR = false) => {
    const token = localStorage.getItem("access_token");

    const fixesToSend = Object.values(fixes).map(fx => {
      let relativePath = fx.file_path;
      
      if (relativePath.includes('/tmp/')) {
        const parts = relativePath.split('/');
        let startIndex = -1;
        
        for (let i = 0; i < parts.length; i++) {
          if (parts[i] && !parts[i].startsWith('tmp') && parts[i] !== '' && parts[i].length > 8) {
            startIndex = i;
            break;
          }
        }
        
        if (startIndex > 0) {
          relativePath = parts.slice(startIndex).join('/');
        }
      }
      
      relativePath = relativePath.replace(/^\/+/, '');
      
      return {
        file_path: relativePath,
        fixed_code: fx.fixed_code,
      };
    });

    if (fixesToSend.length === 0) {
      alert("No fixes to commit.");
      return;
    }

    const requestData = {
      repo_url: repourl,
      token,
      fixes: fixesToSend,
      create_pr: createPR,
      base_branch: baseBranch,
    };

    if (createPR) {
      requestData.pr_title = prTitle;
      requestData.pr_body = prBody;
    }

    try {
      setCommitStatus("🔄 Processing fixes...");

      const res = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/analyze/commit-fixes`, requestData);

      if (res.data.success) {
        let message = res.data.message;
        
        if (res.data.pr_url) {
          message += ` View PR: ${res.data.pr_url}`;
        }
        
        setCommitStatus(`✅ ${message}`);
        setShowPRModal(false);
        
        setTimeout(() => {
          setFixes({});
          setCommitStatus('');
        }, 5000);
      } else {
        setCommitStatus("❌ Operation failed.");
      }
    } catch (err) {
      console.error("Error during commit:", err);
      const errorMessage = err.response?.data?.detail || err.message || "Unknown error";
      setCommitStatus(`❌ Operation failed: ${errorMessage}`);
      alert(`Operation failed: ${errorMessage}`);
    }
  };

  const openPRModal = () => {
    setShowPRModal(true);
  };

  const closePRModal = () => {
    setShowPRModal(false);
  };

  if (loading) {
    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gradient-to-br from-gray-900 to-gray-800' : 'bg-gradient-to-br from-slate-50 to-blue-50'} flex items-center justify-center`}>
        <div className="text-center">
          <div className={`inline-block animate-spin rounded-full h-12 w-12 border-b-2 ${darkMode ? 'border-blue-400' : 'border-blue-600'} mb-4`}></div>
          <p className={`text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>Analyzing {reponame}...</p>
          <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-2`}>This may take a few moments</p>
        </div>
      </div>
    );
  }

  if (!report) {
    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gradient-to-br from-gray-900 to-gray-800' : 'bg-gradient-to-br from-slate-50 to-blue-50'} flex items-center justify-center`}>
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">❌</div>
          <p className={`text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>Analysis failed for {reponame}</p>
          <button 
            onClick={() => navigate('/repos')}
            className={`mt-4 px-6 py-2 ${darkMode ? 'bg-blue-500 hover:bg-blue-600' : 'bg-blue-600 hover:bg-blue-700'} text-white rounded-lg transition-colors`}
          >
            Back to Repositories
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900' : 'bg-gradient-to-br from-slate-50 via-white to-blue-50'} transition-colors duration-300`}>
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header Section */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="p-3 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl">
                <span className="text-white text-2xl">🧠</span>
              </div>
              <div>
                <h1 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>Analysis Report</h1>
                <p className={`text-lg ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>{reponame}</p>
              </div>
            </div>
            
            {/* Dark Mode Toggle */}
            <button
              onClick={toggleDarkMode}
              className={`p-3 rounded-xl transition-all duration-200 ${
                darkMode 
                  ? 'bg-gray-700 hover:bg-gray-600 text-yellow-400' 
                  : 'bg-gray-100 hover:bg-gray-200 text-gray-600'
              }`}
              title={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
            >
              {darkMode ? <Sun size={24} /> : <Moon size={24} />}
            </button>
          </div>

          {/* Repository Info Card */}
          {repoInfo && (
            <div className={`${darkMode ? 'bg-gray-800/80 border-gray-700' : 'bg-white/80 border-gray-200'} backdrop-blur-sm border rounded-2xl p-6 mb-6 shadow-sm transition-colors duration-300`}>
              <div className="flex items-center gap-4">
                <div className={`p-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-lg`}>
                  <span className="text-xl">📂</span>
                </div>
                <div>
                  <h3 className={`font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>{repoInfo.owner}/{repoInfo.repo}</h3>
                  <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                    Default branch: <span className="font-medium">{repoInfo.default_branch}</span>
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Action Bar */}
          <div className={`${darkMode ? 'bg-gray-800/80 border-gray-700' : 'bg-white/80 border-gray-200'} backdrop-blur-sm border rounded-2xl p-6 shadow-sm transition-colors duration-300`}>
            <div className="flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center">
              <button
                onClick={handleFixAll}
                className="flex items-center gap-2 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-md"
              >
                <span className="text-lg">🛠</span>
                Fix All Smells
              </button>

              <div className="flex gap-3">
                <button
                  onClick={() => handleCommitFixes(false)}
                  className="flex items-center gap-2 bg-gradient-to-r from-indigo-500 to-blue-600 hover:from-indigo-600 hover:to-blue-700 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-md"
                >
                  <span className="text-lg">📤</span>
                  Commit & Push
                </button>

                <button
                  onClick={openPRModal}
                  className="flex items-center gap-2 bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 shadow-md"
                >
                  <span className="text-lg">🔄</span>
                  Create Pull Request
                </button>
              </div>
            </div>

            {/* Status Messages */}
            {Object.keys(fixes).length > 0 && (
              <div className={`mt-4 p-4 ${darkMode ? 'bg-green-900/50 border-green-700' : 'bg-green-50 border-green-200'} border rounded-xl`}>
                <div className="flex items-center gap-2">
                  <span className="text-green-600 text-lg">✅</span>
                  <p className={`${darkMode ? 'text-green-300' : 'text-green-800'} font-medium`}>
                    {Object.keys(fixes).length} fixes ready for commit
                  </p>
                </div>
              </div>
            )}

            {commitStatus && (
              <div className={`mt-4 p-4 ${darkMode ? 'bg-blue-900/50 border-blue-700' : 'bg-blue-50 border-blue-200'} border rounded-xl`}>
                <p className={`${darkMode ? 'text-blue-300' : 'text-blue-800'} font-medium whitespace-pre-wrap`}>
                  {commitStatus}
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Issues List */}
        <div className="space-y-6">
          {report.smell_patterns.map((pattern, i) => {
            const key = pattern.file_path + pattern.line_number;
            const isPreviewLoading = previewLoading[key];
            const hasValidPreview = preview[key]?.before && preview[key]?.after;
            const isFixed = fixes[key];

            return (
              <div key={i} className={`${darkMode ? 'bg-gray-800/80 border-gray-700 hover:bg-gray-800/90' : 'bg-white/80 border-gray-200'} backdrop-blur-sm border rounded-2xl shadow-sm hover:shadow-md transition-all duration-300`}>
                <div className="p-6">
                  {/* Issue Header */}
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <span className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm font-medium">
                          {pattern.code}
                        </span>
                        {isFixed && (
                          <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
                            Fixed
                          </span>
                        )}
                      </div>
                      <div className={`${darkMode ? 'bg-gray-700' : 'bg-gray-50'} rounded-lg p-3 font-mono text-sm`}>
                        <div className={`${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-1`}>
                          {pattern.display_path}
                        </div>
                        <div className={`${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          Line {pattern.line_number}
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-3 mb-4">
                    <button
                      onClick={() => handlePreview(pattern.file_path, pattern.code, pattern.line_number)}
                      disabled={isPreviewLoading}
                      className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                        isPreviewLoading 
                          ? `${darkMode ? 'bg-gray-700 text-gray-400' : 'bg-gray-100 text-gray-400'} cursor-not-allowed`
                          : `${darkMode ? 'bg-yellow-900/50 text-yellow-300 hover:bg-yellow-900/70' : 'bg-yellow-100 text-yellow-700 hover:bg-yellow-200'}`
                      }`}
                    >
                      {isPreviewLoading ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600"></div>
                          Loading...
                        </>
                      ) : (
                        <>
                          <span>👁</span>
                          Preview Fix
                        </>
                      )}
                    </button>

                    <button
                      onClick={() => handleFix(pattern.file_path, pattern.code, pattern.line_number)}
                      className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                        darkMode 
                          ? 'bg-blue-900/50 text-blue-300 hover:bg-blue-900/70' 
                          : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                      }`}
                    >
                      <span>🔧</span>
                      Apply Fix
                    </button>
                  </div>

                  {/* Preview Loading State */}
                  {isPreviewLoading && (
                    <div className={`p-4 ${darkMode ? 'bg-yellow-900/50 border-yellow-700' : 'bg-yellow-50 border-yellow-200'} border rounded-xl`}>
                      <div className="flex items-center gap-2">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-yellow-600"></div>
                        <p className={`${darkMode ? 'text-yellow-300' : 'text-yellow-700'} font-medium`}>Generating preview...</p>
                      </div>
                    </div>
                  )}

                  {/* Preview Diff */}
                  {showPreview[key] && !isPreviewLoading && hasValidPreview && (
                    <div className={`mt-4 border ${darkMode ? 'border-gray-600' : 'border-gray-200'} rounded-xl overflow-hidden`}>
                      <div className={`${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'} px-4 py-3 border-b`}>
                        <h4 className={`font-medium ${darkMode ? 'text-gray-200' : 'text-gray-800'} flex items-center gap-2`}>
                          <span>📊</span>
                          Preview Changes
                        </h4>
                      </div>
                      <div className="p-4">
                        <DiffViewer
                          before={preview[key].before}
                          after={preview[key].after}
                          fileName={preview[key].fileName}
                        />
                      </div>
                    </div>
                  )}

                  {/* Applied Fix */}
                  {fixes[key] && !showPreview[key] && (
                    <div className={`mt-4 ${darkMode ? 'bg-green-900/50 border-green-700' : 'bg-green-50 border-green-200'} border rounded-xl`}>
                      <div className={`${darkMode ? 'bg-green-800/50 border-green-700' : 'bg-green-100 border-green-200'} px-4 py-3 border-b`}>
                        <h4 className={`font-medium ${darkMode ? 'text-green-300' : 'text-green-800'} flex items-center gap-2`}>
                          <span>✅</span>
                          Applied Fix
                        </h4>
                      </div>
                      <div className="p-4">
                        <pre className={`whitespace-pre-wrap font-mono text-sm ${darkMode ? 'bg-gray-800 text-gray-200' : 'bg-white text-gray-800'} p-4 rounded-lg border overflow-auto max-h-60`}>
                          {fixes[key].fixed_code}
                        </pre>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>

        {/* Pull Request Modal */}
        {showPRModal && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-y-auto`}>
              <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'} flex items-center gap-3`}>
                  <span className="text-2xl">🔄</span>
                  Create Pull Request
                </h2>
              </div>
              
              <div className="p-6 space-y-6">
                {/* Base Branch */}
                <div>
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-3`}>
                    Base Branch
                  </label>
                  <select
                    value={baseBranch}
                    onChange={(e) => setBaseBranch(e.target.value)}
                    className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-400' 
                        : 'bg-white border-gray-300 focus:border-blue-500'
                    }`}
                  >
                    <option value="main">main</option>
                    <option value="master">master</option>
                    <option value="develop">develop</option>
                    <option value="dev">dev</option>
                  </select>
                </div>

                {/* PR Title */}
                <div>
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-3`}>
                    Pull Request Title
                  </label>
                  <input
                    type="text"
                    value={prTitle}
                    onChange={(e) => setPrTitle(e.target.value)}
                    className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-400' 
                        : 'bg-white border-gray-300 focus:border-blue-500'
                    }`}
                    placeholder="Enter PR title..."
                  />
                </div>

                {/* PR Body */}
                <div>
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-3`}>
                    Pull Request Description
                  </label>
                  <textarea
                    value={prBody}
                    onChange={(e) => setPrBody(e.target.value)}
                    rows={12}
                    className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-vertical ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-blue-400' 
                        : 'bg-white border-gray-300 focus:border-blue-500'
                    }`}
                    placeholder="Enter PR description..."
                  />
                </div>

                {/* Summary */}
                <div className={`${darkMode ? 'bg-blue-900/50 border-blue-700' : 'bg-blue-50 border-blue-200'} border rounded-xl p-4`}>
                  <h3 className={`font-medium ${darkMode ? 'text-blue-300' : 'text-blue-900'} mb-2 flex items-center gap-2`}>
                    <span>📋</span>
                    Summary
                  </h3>
                  <p className={`text-sm ${darkMode ? 'text-blue-200' : 'text-blue-800'}`}>
                    {Object.keys(fixes).length} fixes will be committed to a new branch and a pull request will be created to merge into <strong>{baseBranch}</strong>.
                  </p>
                </div>
              </div>

              {/* Modal Actions */}
              <div className={`p-6 border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-200 bg-gray-50'} rounded-b-2xl`}>
                <div className="flex justify-end gap-3">
                  <button
                    onClick={closePRModal}
                    className={`px-6 py-3 border rounded-lg font-medium transition-colors ${
                      darkMode 
                        ? 'text-gray-300 hover:text-white border-gray-600 hover:bg-gray-600'
                        : 'text-gray-700 hover:text-gray-900 border-gray-300 hover:bg-gray-100'
                    }`}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => handleCommitFixes(true)}
                    className="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white rounded-lg font-medium transition-all duration-200"
                  >
                    Create PR & Push
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default ReportAnalysis;
